f <- read.csv("~/Desktop/one_sample.csv")
View(f)
f <- read.csv("~/Desktop/one_sample.csv")
View(f)
length(f)
length(f$'Median..ss.293F')
conc = as.vector(c(0.1,0.5,1,2.5,5,10,15,25))
length(conc)
plot(conc,f$'Median..ss.293F')
lo <- loess(f$'Median..ss.293F'~conc)
plot(conc,f$'Median..ss.293F')
lines(predict(lo),col='red', lwd=2)
help(supsmu)
x = conc
y = f$'Median..ss.293F'
plot(x,y)
supsmu(x,y)
plot(supsmu(x,y))
plot(x,y)
fits<-lapply(1:3,function(degree)lm(y~poly(x,deg=degree)))
xpred<-pretty(x,n=50)
predictions<-lapply(fits,predict,newdata=list(x=xpred))
invisible(lapply(seq_along(fits),function(i)lines(xpred,predictions[[i]],col=i)))
fix(fits)
fix(predictions)
fix(xpred)
?nls
sigmoid = function(params, x) {params[1] / (1 + exp(-params[2] * (x – params[3])))}
y = c(...)
y = c()
x = 1:53
sigmoid = function(params, x) {params[1] / (1 + exp(-params[2] * (x – params[3])))}
sigmoid = function(params,x){}
sigmoid = function(params,x){ params[1] / (1+ exp(-params[2] * (x - params[3])))}
fit
fitModel = nls(y ~ a / (1 + exp(-b * (x-c))), start=list(a=1,b=0.5,c=25))
fitModel = nls(y ~ a/(1 + exp(-b * (x-c))), start=list(a=1,b=0.5,c=25))
fitModel = nls(y ~ a/(1 + exp(-b * (x-c))), start=list(a=1,b=0.5,c=25))
fitModel = nls(y ~ a/(1 + exp(-b * (x-c))), start= list(a=1,b=0.5,c=25))
fitModel = nls(y ~ a/(1 + exp(-b*(x-c) )), start= list(a=1,b=0.5,c=25) )
fitModel = nls(y ~ a / (1 + exp(-b * (x – c))), start = list(a = 1, b = 0.5, c = 25))
fitModel = nls(y ~ (a/(1 + exp(-b * (x – c)))), start = list(a = 1, b = 0.5, c = 25))
nls(y ~ (a/(1 + exp(-b * (x – c)))), start = list(a = 1, b = 0.5, c = 25))
nls(y ~ (a/(1 + exp(-b * (x – c))))
nls(y ~ (a/(1 + exp(-b * (x – c)))))
nls(y ~ a)
nls(y ~ a/1)
nls(y ~ a/1,start =list(a=1))
nls(y ~ a/1,start =list(a==1))
nls(y ~ a/1,start =list('a'=1))
nls(y ~ a/1,start =list(=1))
rm(list=ls())
stdcrvdata<-data.frame(conc=c(3,10,30,100,300,1000,3000,10000,30000), OD=c(.2,.22,.41,.75,1.07,1.18,1.2,1.27,1.29))
View(stdcrvdata)
stdcrvdata$logconc <-log10(stdcrvdata$conc)
plot(stdcrvdata$logconc, stdcrvdata$OD, main="log standard curve", xlab="x=log(conc)", ylab="y=OD")
fit <- nls(OD ~ d+(a-d)/(1+(logconc/cc)^b), data=stdcrvdata, start=list(d=0.2, a=1.5, cc=2, b=-11), trace=TRUE)
summary(fit)
x <- seq(.5,4.5, length=100)
y <- (coef(fit)["d"]+(coef(fit)["a"]-coef(fit)["d"])/(1+(x/coef(fit)["cc"])^coef(fit)["b"]))
lines(x,y, lty="dotted", col="red")
samples<-data.frame(OD=c(.27,.19,1.2))
samples$loganswer<-coef(fit)["cc"]*(((-1*coef(fit)["a"]+samples$OD)/(coef(fit)["d"]-samples$OD))^(1/coef(fit)["b"]))
samples$conc <- 10^samples$loganswer
samples
write.table(samples,file="mydata.csv",sep=",")
lines(samples$loganswer,samples$OD, type="points", col="blue")
install.packages("drc")
library("drc", lib.loc="/Library/Frameworks/R.framework/Versions/2.11/Resources/library")
fix(y)
f <- read.csv("~/Desktop/one_sample.csv")
View(f)
fix(fit)
View(samples)
fix(x)
View(f)
d<-data.frame(conc=c(0.001,0.01,0.1,0.5,1,5,10,25), mfi=as.vector(f$'Median..ss.293F'))
d
modelex1<-multdrc(d)
modelex1<-drm(d)
?drm
modelex1<-drm(d,fct=LL.5)
modelex1<-drm(d,fct=LL.5())
summary(modelex1)
plot(modelex1,xlab="Concentration",ylab="MFI Value")
plotdrc(modelex1,ylab="MFI value", colour=TRUE)
help(drc)
??drc
??drc::plot
plot(modelex1,xlab="Concentration",ylab="MFI Value")
d<-data.frame(conc=c(0.001,0.01,0.1,0.5,1,5,10,25), mfi=as.vector(f$'Median..ss.293F'),mfi2=as.vector(f$'Median..ss.293F.H8'))
plot(modelex1,xlab="Concentration",ylab="MFI Value")
modelex1<-drm(d,fct=LL.5())
d
modelex2<-multdrc(SLOPE~DOSE,CURVE, data=d)
help(drm)
p
prob
pexp(11,1/10,lower.tail=FALSE)
qexp(.75,1)
qexp(75,1)
q(.75,1)
pexp(.5,1/2,lower.tail=FALSE)
rep(10,4)
?rep
?%*%
%*%
?sum
x<-1:10
x
lenght(x)
length(x)
sum(x==4)
sum(x>4)
sum(length(x>4))
length(x>4)
?read.table
?sapply
?class
class(x)
str(file)
getwd()
summary(x)
n<- 1:4
r<-lapply(n,rnorm)
r
?rnorm
rnorm
stat(n)
str(r)
x<- list(rnorm(100), runif(100), rpois(100,1))
z<-sapply(x,quantile,probs=c(0.25,0.75))
str(z)
z
?gl
?interaction
?invisible
print("x")
printmessage<-function(x){ if (x>0) print ("x > 0") else print("x<0")}
printmessage(10)
printmessage(-10)
printmessage<-function(x){ if (x>0) print ("x > 0") else print("x<0") invisible(x)}
printmessage<-function(x){}
printmessage<-function(x){ }
printmessage<-function(x){ if(x>0)}
printmessage<-function(x){ if (x>0) print ("x > 0") else print("x<0") invisible(x)}
printmessage<- function(x){
if(x>0) print("x > 0")
else print("x < 0")
invisible(x)
}
printmessage(10)
printmessage(NA)
cube<- function(x,n){ x^3 }
cube(3)
pow<- function(x=4, n=3) { x^n }
pow()
x<- 1:10
if(x>5){ x<-0}
library(datasets)
data(iris)
?iris
View(iris)
colMeans(iris,Sepal.Length)
str(colMeans)
colMeans(iris$Sepal.Length)
colMeans(iris)
apply(iris,2,mean)
apply(iris$Sepal.Length,2,mean)
apply(iris[1:4],2,mean)
iris$Species
tapply(iris[1:4],iris$Species,mean)
tapply(iris[1:4],rep(iris$Species,4),mean)
tapply(iris[1],iris$Species,mean)
tapply(iris[1:1],iris$Species,mean)
split(iris,iris$Species)
flower <-split(iris,iris$Species)
flower
flower[3]
apply(flowers[3],2,mean)
apply(flowers[3][1:4],2,mean)
apply(flower[3][1:4],2,mean)
apply(flower[3][1],2,mean)
tapply(flower[3],flower[3]$Species,mean)
flower[3]$Species
flower[3][1]
str(flower[3])
virginia <-flower[3]
str(virginia)
data.frame(virginia)
str(virginia)
virginia$Sepal.Length
virginia$virginica.Sepal.Length
virginia[Sepal.Length]
virginia
matrix(virginia)
virginia <- data.frame(flower[3])
str(virginia)
virginia$virginica.Sepal.Length
sapply(virginia$virginica.SepalLength,mean)
mean(virginia$virginica.Sepal.length)
lapply(virginia$virginica.Sepal.Length,mean)
virginia$virginica.Sepal.Length
sapply(virginia[1:4],mean)
rowMeans(iris[,1:4])
apply(iris,2,mean)
apply(iris[,1:4],2,mean)
apply(iris,1,mean)
apply(iris,2,mean)
data(mtcars)
View(mtcars)
?mtcars
apply(mtcars,2,mean)
lapply(mtcars,mean)
sapply(split(mtcars$mpg,mtcars$cyl),mean)
mean(mtcars$mpg,mtcars$cyl)
sapply(mtcars$hp,mtcars$cyl),mean)
sapply(split(mtcars$hp,mtcars$cyl),mean)
209.21429 - 82.63636
sapply(split(iris$Sepal.Length,iris$Species),mean)
f <- function(x) { g<- function(y) { y+ z} z<-4 x +g(x)}
f <- function(x) { g<- function(y) { y+ z} z<-4 x +g(x)}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<-10
f(3)
str(f)
f
y
rm(y)
rm(x)
rm(z)
f(3)
z
library(lattice)
library(nlme)
xyplot(distance ~age | Subject, data = Orthodont)
xyplot(distance ~age | Subject, data = Orthodont, type="b")
x<- rnorm(100)
y<- x + rnorm(100, sd=0.5)
f<-gl(2,50, labels=c("GRoup1","Group2"))
xyplot(y~x|f)
data(environmental)
head(environmental)
head(environmentalxyplot(ozone~radiation, data=environmental))
xyplot(ozone~radiation, data=environmental))
xyplot(ozone~radiation, data=environmental)
library(ggplot2)
library(ggplot)
install.packages("gplot2")
install.packages("ggplot2")
library(ggplot2)
qplot(displ, hwy, data=mpg)
head(mpg)
qplot(displ, hwy, data=mpg, color=drv)
qplot(displ, hwy, data=mpg, color=drv, geom=c("points","smooth"))
qplot(displ, hwy, data=mpg, color=drv, geom=c("point","smooth"))
install.packages("knitr")
install.packages(c("boot", "class", "cluster", "codetools", "foreign", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nlme", "survival"))
install.packages(c("boot", "class", "cluster", "codetools", "foreign",
install.packages("knitr")
)
;
pal<colorRampPaletter(c("red","yellow","blue"))
pal<-colorRampPaletter(c("red","yellow","blue"))
pal<-colorRampPalette(c("red","yellow","blue"))
x<-rnorm(100)
plot(x,col=pal(100))
plot(x,col=pal(10))
plot(x,col=pal(1000))
plot(x,col=pal(75))
plot(x,col=pal(50))
library(RColorBrewer)
cols<-brewer.pal(3,"BuGn")
pal<-colorRampPalette(cols)
image(volcano,col=pal(20))
x<- as.Date("1970-01-01")
x
unclas(x)
unclass(x)
weekdays
weekdays()
install.packages("devtools")
install.packages("knitr")
require(devtools)
install_github(c('slidify','slidifylibraries'),'ramnathv',ref='dev')
install_github('rCharts','ramnathv')
install_github('shiny','rstudio')
install.packages("shiny")
install.packages(c("boot", "car", "class", "cluster", "codetools", "digest", "dplyr", "foreign", "ggplot2", "gtools", "KernSmooth", "labeling", "manipulate", "MASS", "Matrix", "mgcv", "nlme", "nnet", "plotrix", "RColorBrewer", "Rcpp", "RCurl", "reshape2", "rpart", "spatial"))
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("markdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("rCharts", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("RColorBrewer", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("shiny", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("slidify", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("slidifyLibraries", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("yaml", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
install.packages("googleVis")
library("googleVis", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
setwd("~/Dropbox/Personal/R-work/Developing_data_products_class")
library(shiny)
runApp(display.mode("showcase"))
runApp(display.mode="showcase")
md <-rnorm(10)
md
print(md)
dataSet <- mydata <- read.table("test_input.csv")
dataSet
dataSet$V1
dataSet$V1$Days
dataSet$V1$1
dataSet$V1[1]
dataSet <- data.frame(mydata <- read.table("test_input.csv"))
dataSet
plot(dataSet)
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
md <- read.table("test_input.csv",header=TRUE)
md
?read.table()
md <- read.table("test_input.csv",sep=',',header=TRUE)
md
md$Days
md$V1
md$V0
md$V2
colnames(md)
a<- colnames(md)
a
a[0]
a[1]
a[2]
length(a)
runApp(display.mode="showcase")
md
a
md$a[2]
md$(a[2])
paste(a[1])
b = paste(a[1])
b
md$b
md$
;
list md
summary(md)
plot(md[,2:3])
plot(md[,1:2])
points(md[,3],col=2)
runApp(display.mode="showcase")
runApp()
library(shinyapps)
library(devtools)
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='talonsensei', token='C02E0A6FADE0AC3116EB471458AAC3F6', secret='yZ0TdtLMGWydAZikPWoa0CmTvFVravF+pgBEEsM8')
library(shinyapps)
shinyapps::deployApp('')
shinyapps::deployApp('Users/talon34/Dropbox/Personal/R-work/Developing_data_products_class')
setwd("~/Dropbox/Personal/R-work/Developing_data_products_class/simplePlot")
runApp()
deployApp()
library(devtools)
library(slidify)
setwd("/opt/git-repo/simplePlot")
author("simplePlot")
setwd("/opt/git-repo")
author("simplePlot")
runApp()
library(knitr)
- Add labels to the X and Y axes and provide a title
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
framework   : io2012        # {io2012, html5slides, shower, dzslides, ...}
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
